--In order to mask data a masking policy needs to be created.

--Step 1
CREATE DATABASE GOVERNANCE comment = 'Used for data masking';

--Step 2
CREATE SCHEMA GOVERNANCE.TAGS;

--Step 3 
--SELECT GET_DDL('POLICY', 'GOVERNANCE.TAGS.databricks_policy');

create or replace masking policy DATABRICKS_POLICY as (VAL NUMBER(38,0)) 
returns NUMBER(38,0) ->
000000
;
GRANT USAGE ON DATABASE GOVERNANCE.TAGS TO SHARE CLEAN_SNOWFLAKE_SECURE_SHARE_1730830464920;

--This is for creating the schema where the secure views will be staored.
--Step 4
CREATE SCHEMA CLEAN.PROD_INSURANCE_SECURE;

--There needs to be a database role granted to the share.
CREATE OR REPLACE DATABASE ROLE DATABRICKS_CONNECT

GRANT DATABASE ROLE CLEAN.DATABRICKS_CONNECT
TO SHARE CLEAN_SNOWFLAKE_SECURE_SHARE_1730830464920;

GRANT USAGE ON DATABASE CLEAN TO ROLE DATABRICKS_CONNECT;
GRANT USAGE ON SCHEMA CLEAN.PROD_INSURANCE_SECURE TO ROLE DATABRICKS_CONNECT;
GRANT SELECT ON VIEW CLEAN.PROD_INSURANCE_SECURE.COMMISSION_VC TO ROLE DATABRICKS_CONNECT;

GRANT SELECT ON VIEW CLEAN.PROD_INSURANCE_SECURE.COMMISSION_VC TO SHARE CLEAN_SNOWFLAKE_SECURE_SHARE_1730830464920;
GRANT USAGE ON SCHEMA CLEAN.PROD_INSURANCE TO SHARE CLEAN_SNOWFLAKE_SECURE_SHARE_1730830464920;
GRANT SELECT ON VIEW CLEAN.PROD_INSURANCE_SECURE.COMMISSION_VC TO SHARE CLEAN_SNOWFLAKE_SECURE_SHARE_1730830464920;
GRANT DATABASE ROLE CLEAN.DATABRICKS_CONNECT TO SHARE CLEAN_SNOWFLAKE_SECURE_SHARE_1730830464920;

--After the reader account was provisioned in the main FH account, these are the commands used in the reader account.
--The database was created from the share going to 
--Data Products - Private Sharing  then creating the database from the share.

CREATE OR REPLACE WAREHOUSE CL_LINK 
WITH 
  WAREHOUSE_TYPE = STANDARD
  WAREHOUSE_SIZE='XSMALL'
  MAX_CLUSTER_COUNT = 1
  MIN_CLUSTER_COUNT = 1
  SCALING_POLICY = STANDARD
  AUTO_SUSPEND = 300
  AUTO_RESUME = TRUE
  INITIALLY_SUSPENDED = FALSE
  --RESOURCE_MONITOR = <monitor_name>
  COMMENT = 'For use to connect Databricks to Snowflake.'
  ENABLE_QUERY_ACCELERATION = FALSE
  --QUERY_ACCELERATION_MAX_SCALE_FACTOR = <num>
  --these object parameters are set to their defaults.
  MAX_CONCURRENCY_LEVEL = 8
  STATEMENT_QUEUED_TIMEOUT_IN_SECONDS = 0
  STATEMENT_TIMEOUT_IN_SECONDS = 172800  
  ;

CREATE OR REPLACE USER SwapnaSreevalsan
PASSWORD = 'Nov!!24!!'
LOGIN_NAME = 'SwapnaSreevalsan'
FIRST_NAME = 'Swapna'
LAST_NAME = 'Sreevalsan'
EMAIL = 'Swapna.Sreevalsan@canadalife.com'
MUST_CHANGE_PASSWORD = true
DEFAULT_WAREHOUSE = CL_LINK; 

CREATE OR REPLACE USER ChrisAllen
PASSWORD = 'TestingLink24%%'
LOGIN_NAME = 'ChrisAllen'
FIRST_NAME = 'Chris'
LAST_NAME = 'Allen'
EMAIL = 'Christopher.Allen@canadalife.com'
MUST_CHANGE_PASSWORD = true
DEFAULT_WAREHOUSE = CL_LINK; 

CREATE OR REPLACE USER DATABRICKS_SERVICE
PASSWORD = 'TestingLink24%%'
LOGIN_NAME = 'ChrisAllen'
FIRST_NAME = 'Chris'
LAST_NAME = 'Allen'
EMAIL = 'Christopher.Allen@canadalife.com'
MUST_CHANGE_PASSWORD = true
DEFAULT_WAREHOUSE = CL_LINK; 

GRANT ROLE ACCOUNTADMIN TO USER SwapnaSreevalsan;
GRANT ROLE ACCOUNTADMIN TO USER ChrisAllen;
GRANT ROLE DATABRICKS_CONNECT TO USER CL_CONNECT;

GRANT DATABASE ROLE FH_DATA.DATABRICKS_CONNECT TO ROLE PUBLIC;

GRANT IMPORTED PRIVILEGES ON DATABASE FH_DATA TO ROLE PUBLIC;


SHOW users;

SHOW GRANTS TO USER CL_CONNECT;

show roles;


GRANT USAGE ON WAREHOUSE CL_LINK TO ROLE DATABRICKS_CONNECT;
GRANT USAGE ON WAREHOUSE CL_LINK TO ROLE PUBLIC;

select * from FH_DATA.PROD_INSURANCE_SECURE.COMMISSION_VC
;
--works

select * from FH_DATA.PROD_INSURANCE_SECURE.COMMISSION_VC
limit 1;
--works

show grants on database FH_DATA;

show grants on schema FH_DATA.PROD_INSURANCE_SECURE;

show grants on view FH_DATA.PROD_INSURANCE_SECURE.COMMISSION_VC;
